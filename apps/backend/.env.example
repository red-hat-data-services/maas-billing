# Backend Environment Configuration
# Cluster configuration for your OpenShift/Kubernetes cluster

# =============================================================================
# HOW TO EXTRACT CLUSTER INFORMATION AND KEYS:
# =============================================================================
# 1. Get cluster domain:
#    oc whoami --show-server | sed 's/api\.//' | sed 's/:6443//'
#    Example: https://api.your-cluster.example.com:6443
#    Result: apps.your-cluster.example.com
#
# 2. Find Key Manager route:
#    kubectl get routes -n platform-services | grep key-manager
#    oc get routes -n platform-services
#
# 3. Extract admin key from secret:
#    kubectl get secret key-manager-admin -n platform-services -o jsonpath='{.data.admin-key}' | base64 -d
#    OR: oc get secret key-manager-admin -n platform-services -o yaml
# =============================================================================

# Development settings
NODE_ENV=development
PORT=3001
LOG_LEVEL=info
QOS_SERVICE_URL=http://localhost:3005

# Cluster Domain Configuration (Required for Prometheus metrics access)
# Extract from: oc whoami --show-server | sed 's/api\.//' | sed 's/:6443//'
CLUSTER_DOMAIN=apps.your-cluster.example.com

# Service URLs  
# Extract from: oc whoami --show-server and replace 'api' with 'oauth-openshift'
OAUTH_URL=https://oauth-openshift.apps.your-cluster.example.com

# Extract from: oc whoami --show-console
CONSOLE_URL=https://console-openshift-console.apps.your-cluster.example.com

# Extract from: oc whoami --show-server
CLUSTER_API_URL=https://api.your-cluster.example.com:6443

# Key Manager / MaaS API Base URL
# Extract from: kubectl get routes -n platform-services | grep key-manager
KEY_MANAGER_BASE_URL=https://key-manager-route-platform-services.apps.your-cluster.example.com

# Key Manager Authentication (Required for token management)
# Extract from: kubectl get secret key-manager-admin -n platform-services -o jsonpath='{.data.admin-key}' | base64 -d
ADMIN_KEY=your-admin-key-here

# Frontend Configuration (for CORS and redirects)
FRONTEND_URL=http://localhost:3000

# Tier-Group ConfigMap Configuration (Required for dynamic user tier assignment)
# Extract from: oc get configmaps -n maas-api | grep tier
TIER_GROUP_CONFIGMAP_NAME=tier-to-group-mapping
TIER_GROUP_CONFIGMAP_NAMESPACE=maas-api